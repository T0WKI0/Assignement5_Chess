#BlueJ class context
comment0.target=ChessPiece
comment0.text=\r\n\ Abstract\ class\ ChessPiece\ -\ contains\ the\ instance\ fields\ for\ a\ chess\ piece's\ column\ (a-h),\ row\ (1-8),\r\n\ and\ color\ (WHITE\ or\ BLACK).\ The\ abstract\ class\ contains\ a\ constructor\ method\ for\ a\ ChessPiece\ with\ col,\r\n\ row,\ and\ color\ parameters.\ Getter\ methods\ for\ the\ column,\ row,\ color,\ and\ position.\ The\ abstract\ methods\r\n\ for\ canMove(),\ canCapture(),\ and\ toString()\ will\ be\ implemented\ in\ the\ concrete\ sublasses\ corresponding\r\n\ to\ each\ chess\ piece.\r\n\r\n\ @author\ (Melvin\ Kuchefski)\r\n\ @version\ (4.1.23)\r\n
comment1.params=col\ row\ color
comment1.target=ChessPiece(char,\ int,\ ChessPiece.Color)
comment1.text=\r\n\ Constructor\ for\ ChessPiece\ objects.\r\n\ \r\n\ @param\ \ \ col\ the\ column\ position\ of\ the\ chess\ piece\r\n\ @param\ \ \ row\ the\ row\ position\ of\ the\ chess\ piece\r\n\ @param\ \ \ color\ \ \ the\ color\ of\ the\ chess\ piece\r\n\ @throws\ \ IllegalArgumentException\ if\ invalid\ column\r\n\ @throws\ \ IllegalArgumentException\ if\ invalid\ row\r\n
comment2.params=
comment2.target=char\ getColumn()
comment2.text=\r\n\ Returns\ the\ column\ position\ of\ the\ chess\ piece.\r\n\ \r\n\ @return\ \ column\ position\ of\ the\ chess\ piece\r\n
comment3.params=
comment3.target=int\ getRow()
comment3.text=\r\n\ Returns\ the\ row\ position\ of\ the\ chess\ piece.\r\n\ \r\n\ @return\ \ row\ position\ of\ the\ chess\ piece\r\n
comment4.params=
comment4.target=ChessPiece.Color\ getColor()
comment4.text=\r\n\ Returns\ the\ color\ of\ the\ chess\ piece.\r\n\ \r\n\ @return\ \ color\ of\ the\ chess\ piece\r\n
comment5.params=
comment5.target=java.lang.String\ getPosition()
comment5.text=\r\n\ Returns\ a\ string\ representing\ the\ (col,\ row)\ position\ of\ the\ chess\ piece.\r\n\ \r\n\ @return\ \ string\ representing\ the\ (col,\ row)\ position\ of\ the\ chess\ piece\r\n
comment6.params=col\ row
comment6.target=boolean\ canMove(char,\ int)
comment6.text=\r\n\ Abstract\ boolean\ method\ to\ be\ implemented\ in\ the\ concrete\ sublasses\r\n\ corresponding\ to\ each\ chess\ piece.\ Returns\ true\ if\ the\ chess\ piece\r\n\ can\ legally\ move\ to\ the\ given\ position,\ false\ otherwise.\r\n\ \r\n\ @param\ \ \ col\ column\ position\ of\ the\ chess\ piece\r\n\ @param\ \ \ row\ row\ position\ of\ the\ chess\ piece\r\n
comment7.params=piece
comment7.target=boolean\ canCapture(ChessPiece)
comment7.text=\r\n\ Abstract\ boolean\ method\ to\ be\ implemented\ in\ the\ concrete\ sublasses\r\n\ corresponding\ to\ each\ chess\ piece.\ Returns\ true\ if\ another\ given\ \r\n\ chess\ piece\ can\ be\ captured\ by\ that\ chess\ piece,\ false\ otherwise.\r\n\ \r\n\ @param\ \ \ piece\ \ \ other\ chess\ piece\ object\r\n
comment8.params=
comment8.target=java.lang.String\ toString()
comment8.text=\r\n\ Abstract\ boolean\ method\ to\ be\ implemented\ in\ the\ concrete\ sublasses\r\n\ corresponding\ to\ each\ chess\ piece.\ Returns\ a\ string\ representation\r\n\ of\ the\ chess\ piece's\ color\ and\ class.\r\n
numComments=9
